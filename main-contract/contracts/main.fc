#include "./imports/stdlib.fc" ;

const const::min_tons_for_storage = 10000000; ;; 0.01 ton

(int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter value
        ds~load_msg_addr(), ;; recent sender
        ds~load_msg_addr() ;; contract owner
    );
}

() save_data(int counter_value, slice sender, slice owner) impure inline {
    set_data(begin_cell().store_uint(counter_value, 32).store_slice(sender).store_slice(owner).end_cell());
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender = cs~load_msg_addr();

    var (counter_value, recent_sender, owner) = load_data();
    
    int op = in_msg_body~load_uint(32);

    if(op == 1) {
        int increment_amount = in_msg_body~load_uint(32);
        save_data(counter_value + increment_amount, sender, owner);
        return();
    } 
    if (op == 2) {
        int decrement_amount = in_msg_body~load_uint(32);
        save_data(counter_value - decrement_amount, sender, owner);
        return();
    }

    if (op == 3) {
        return();
    }

    if (op == 4) {
        throw_unless(103, equal_slices_bits(sender,owner));

        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(104, balance >= withdraw_amount);

        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

        int mode = 1; ;; 0 ordinary + 1 pay transfer fee separately from mgs value

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        
        send_raw_message(msg.end_cell(), mode);

        return();
    }

     save_data(counter_value, sender, owner);
}  

(int, slice, slice) get_contract_storage_data() method_id {
    var (counter_value, recent_sender, owner) = load_data();
    return (
        counter_value, 
        recent_sender, 
        owner
    );
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}
